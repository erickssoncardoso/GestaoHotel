/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package telas;

/**
 *
 * @author ecardoso
 */
import conexao.ConexaoBD;
import dao.AcomodacaoDAO;
import dao.HotelDAO;
import dao.ReservaDAO;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import model.Hotel;
import model.acomodacao.Acomodacao;
import model.acomodacao.QuartoSimples;
import model.acomodacao.SuitePresidencial;



public class ConsultaHotel extends javax.swing.JInternalFrame {
  private JLabel tipoLabel;
    private JLabel leitosLabel;
    private JLabel precoLabel;
    private JTextField tipoField;
    private JTextField leitosField;
    private JTextField precoField;
    private JButton adicionarButton;
    private JButton atualizarButton;
    private JButton excluirButton;
    private HotelDAO hotelDAO;
    private ReservaDAO reservaDAO;
    /**
     * Creates new form TelaAcomodacao
     */
    public ConsultaHotel() {
          initComponents();
    hotelDAO = new HotelDAO();
    reservaDAO = new ReservaDAO();
    preencherComboboxLocalizacao();
        
    }
    
    private void preencherComboboxLocalizacao() {
    try {
        // Limpar itens existentes no ComboBox
        ComboboxLocalizacao.removeAllItems();
        
        // Obter a lista de localizações disponíveis
        List<String> localizacoes = hotelDAO.listarLocalizacoes();
        
        // Adicionar as localizações ao ComboBox
        for (String localizacao : localizacoes) {
            ComboboxLocalizacao.addItem(localizacao);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar localizações: " + e.getMessage());
    }
}

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelLoc1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        labelAcomodacao = new javax.swing.JLabel();
        labelLoc = new javax.swing.JLabel();
        btnPesquisar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ComboboxLocalizacao = new javax.swing.JComboBox<>();
        jDateCheckIn = new com.toedter.calendar.JDateChooser();
        jDateCheckOut = new com.toedter.calendar.JDateChooser();
        labelAcomodacao1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        labelLoc1.setText("Localização");

        setClosable(true);

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Localização", "Check-In", "Check-Out"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        labelAcomodacao.setText("Check-In");

        labelLoc.setText("Localização");

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("Gestão de Hoteis");

        ComboboxLocalizacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        labelAcomodacao1.setText("Check-Out");

        jLabel1.setText("Id Utilizador");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(labelLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelAcomodacao)
                                .addComponent(ComboboxLocalizacao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jDateCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jDateCheckOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(labelAcomodacao1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelLoc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ComboboxLocalizacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(labelAcomodacao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelAcomodacao1)
                        .addGap(11, 11, 11)
                        .addComponent(jDateCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnPesquisar)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void atualizarTabelaHoteis() {
               try {
        // Limpa o modelo da tabela
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        // Obtém a lista de hotéis do banco de dados
        List<Hotel> hoteis = hotelDAO.listar();
        
        // Preenche a tabela com os dados dos hotéis
        for (Hotel hotel : hoteis) {
            model.addRow(new Object[]{hotel.getId(), hotel.getNome(), hotel.getLocalizacao()});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar tabela de hotéis: " + e.getMessage());
    }
}

    
    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

    }//GEN-LAST:event_jTable1MouseClicked

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
    // Obter os valores selecionados nos campos
    String localizacao = (String) ComboboxLocalizacao.getSelectedItem();
    java.util.Date checkIn = jDateCheckIn.getDate();
    java.util.Date checkOut = jDateCheckOut.getDate();
    String idUsuarioText = jTextField1.getText();
    int idUsuario = 0;

    // Validar se as datas foram selecionadas corretamente
    if (checkIn == null || checkOut == null) {
        JOptionPane.showMessageDialog(this, "Selecione as datas de check-in e check-out.");
        return;
    }

    // Se o ID do usuário não estiver vazio, tentar converter para inteiro
    if (!idUsuarioText.isEmpty()) {
        try {
            idUsuario = Integer.parseInt(idUsuarioText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Insira um número válido para o ID do usuário.");
            return;
        }
    }

    // Converter as datas para o formato SQL Date
    java.sql.Date dataCheckin = new java.sql.Date(checkIn.getTime());
    java.sql.Date dataCheckout = new java.sql.Date(checkOut.getTime());

    // Chamar o método do DAO para buscar os hotéis disponíveis
    List<Hotel> hoteisDisponiveis;
    if (idUsuario != 0) {
        try {
            hoteisDisponiveis = hotelDAO.listarHoteisDisponiveisPorUsuario(idUsuario);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar hotéis disponíveis para o usuário: " + e.getMessage());
            return;
        }
    } else {
        hoteisDisponiveis = hotelDAO.listarHoteisDisponiveis(localizacao, dataCheckin, dataCheckout);
    }

    // Atualizar a tabela com os hotéis encontrados
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Limpar a tabela antes de adicionar os novos resultados
    for (Hotel hotel : hoteisDisponiveis) {
        model.addRow(new Object[]{hotel.getLocalizacao(), dataCheckin, dataCheckout});
    }
    }//GEN-LAST:event_btnPesquisarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboboxLocalizacao;
    private javax.swing.JButton btnPesquisar;
    private com.toedter.calendar.JDateChooser jDateCheckIn;
    private com.toedter.calendar.JDateChooser jDateCheckOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel labelAcomodacao;
    private javax.swing.JLabel labelAcomodacao1;
    private javax.swing.JLabel labelLoc;
    private javax.swing.JLabel labelLoc1;
    // End of variables declaration//GEN-END:variables
}
